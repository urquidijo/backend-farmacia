generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  passwordHash String
  firstName    String
  lastName     String
  status       UserStatus    @default(ACTIVE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  telefono     String?
  carritoItems CarritoItem[]
  ordenes      Orden[]
  roles        UserRole[]  
  deviceTokens DeviceToken[]

  Bitacora     Bitacora[]
}

enum Platform {
  ANDROID
  IOS
  WEB
}

model DeviceToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  platform  Platform
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([active])
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       UserRole[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  key         String           @unique
  description String?
  roles       RolePermission[]
}

model UserRole {
  userId Int
  roleId Int
  role   Role @relation(fields: [roleId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
}

model RolePermission {
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

model Marca {
  id        Int        @id @default(autoincrement())
  nombre    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  productos Producto[]
}

model Categoria {
  id        Int        @id @default(autoincrement())
  nombre    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  productos Producto[]
}

model Unidad {
  id        Int        @id @default(autoincrement())
  codigo    String     @unique
  nombre    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  productos Producto[]
}

model Producto {
  id             Int           @id @default(autoincrement())
  nombre         String
  descripcion    String?
  stockMinimo    Int           @default(0)
  activo         Boolean       @default(true)
  creadoEn       DateTime      @default(now())
  actualizadoEn  DateTime      @updatedAt
  marcaId        Int
  categoriaId    Int
  unidadId       Int
  imageKey       String?
  imageUrl       String?
  precio         Decimal       @default(0)
  stockActual    Int           @default(0)
  requiereReceta Boolean       @default(false)
  alerts         Alert[]
  carritoItems   CarritoItem[]
  lotes          Lote[]
  ordenItems     OrdenItem[]
  categoria      Categoria     @relation(fields: [categoriaId], references: [id])
  marca          Marca         @relation(fields: [marcaId], references: [id])
  unidad         Unidad        @relation(fields: [unidadId], references: [id])
}

model Cliente {
  id        Int      @id @default(autoincrement())
  nombre    String
  apellido  String?
  nit       String?  @unique
  telefono  String?
  email     String?
  direccion String?
  activo    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarritoItem {
  id         Int      @id @default(autoincrement())
  userId     Int
  productoId Int
  cantidad   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productoId])
}

model Orden {
  id        Int         @id @default(autoincrement())
  userId    Int
  total     Decimal
  estado    EstadoOrden @default(PENDIENTE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  items     OrdenItem[]
  pago      Pago?       @relation("OrdenPago")
}

model OrdenItem {
  id             Int      @id @default(autoincrement())
  ordenId        Int
  productoId     Int
  cantidad       Int
  precioUnitario Decimal
  subtotal       Decimal
  orden          Orden    @relation(fields: [ordenId], references: [id], onDelete: Cascade)
  producto       Producto @relation(fields: [productoId], references: [id])
}

model Lote {
  id         Int      @id @default(autoincrement())
  productoId Int
  codigo     String?
  cantidad   Int      @default(0)
  fechaVenc  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  alerts     Alert[]
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)

  @@index([productoId])
  @@index([fechaVenc])
}

model Alert {
  id          Int           @id @default(autoincrement())
  type        AlertType
  productoId  Int
  loteId      Int?
  mensaje     String
  severity    AlertSeverity
  venceEnDias Int?
  stockActual Int?
  stockMinimo Int?
  windowDias  Int
  leida       Boolean       @default(false)
  resolvedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  lote        Lote?         @relation(fields: [loteId], references: [id])
  producto    Producto      @relation(fields: [productoId], references: [id])

  @@index([type, leida])
  @@index([productoId])
  @@index([createdAt])
}

model Bitacora {
  id        Int            @id @default(autoincrement())
  userId    Int
  ip        String
  acciones  String
  estado    EstadoBitacora
  createdAt DateTime       @default(now())
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([estado, createdAt])
  @@map("bitacora")
}

model Pago {
  id         Int      @id @default(autoincrement())
  ordenId    Int      @unique
  stripeId   String   @unique
  monto      Float
  estado     String
  metodo     String?
  facturaUrl String?
  createdAt  DateTime @default(now())
  orden      Orden    @relation("OrdenPago", fields: [ordenId], references: [id])
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum EstadoOrden {
  PENDIENTE
  PAGADA
  ENVIADA
  ENTREGADA
  CANCELADA
}

enum AlertType {
  STOCK_BAJO
  VENCIMIENTO
}

enum AlertSeverity {
  INFO
  WARNING
  CRITICAL
}

enum EstadoBitacora {
  EXITOSO
  FALLIDO
}
